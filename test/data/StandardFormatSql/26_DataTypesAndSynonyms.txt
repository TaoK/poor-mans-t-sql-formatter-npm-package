--Data type synonyms are overviewed at the following MSDN page:
-- http://msdn.microsoft.com/en-us/library/ms177566.aspx
DECLARE @Int1 NATIONAL CHARACTER
DECLARE @Table1 TABLE (
	Col1 NATIONAL CHARACTER
	,Col2 NATIONAL CHARACTER VARYING(20)
	)

SELECT @Int1 = 9

INSERT INTO @Table1
SELECT 1
	,2

SELECT Col1 + @Int1
	,Col2
FROM @Table1
GO

CREATE PROC TestTypes @Arg1 AS NATIONAL TEXT
AS
SELECT CONVERT(DOUBLE PRECISION, 10) AS SomeCol
INTO #SomeTempTable

SELECT *
FROM #SomeTempTable

EXEC tempdb..sp_help 'tempdb..#SomeTempTable'

DROP TABLE #SomeTempTable
GO

TestTypes 'test'

DROP PROC TestTypes

--Also 2008-specific datatypes here, from MSDN sample:
-- http://msdn.microsoft.com/en-us/library/bb630289.aspx
SELECT CAST('2007-05-08 12:35:29. 1234567 +12:15' AS TIME(7)) AS 'time'
	,CAST('2007-05-08 12:35:29. 1234567 +12:15' AS DATE) AS 'date'
	,CAST('2007-05-08 12:35:29.123' AS SMALLDATETIME) AS 'smalldatetime'
	,CAST('2007-05-08 12:35:29.123' AS DATETIME) AS 'datetime'
	,CAST('2007-05-08 12:35:29.1234567+12:15' AS DATETIME2(7)) AS 'datetime2'
	,CAST('2007-05-08 12:35:29.1234567 +12:15' AS DATETIMEOFFSET(7)) AS 'datetimeoffset'
	,CAST('2007-05-08 12:35:29.1234567+12:15' AS DATETIMEOFFSET(7)) AS 'datetimeoffset IS08601';

--HierarchyID Stuff:
-- http://msdn.microsoft.com/en-us/library/bb677237.aspx
CREATE TABLE #EmployeeDemo (
	EmployeeID INT
	,LoginID VARCHAR(200)
	,ManagerID INT
	);

INSERT INTO #EmployeeDemo
VALUES (
	1
	,'zarifin'
	,NULL
	)
	,(
	2
	,'tplate'
	,1
	)
	,(
	3
	,'hjensen'
	,1
	)
	,(
	4
	,'schai'
	,2
	)
	,(
	5
	,'elang'
	,2
	)
	,(
	6
	,'gsmits'
	,2
	)
	,(
	7
	,'sdavis'
	,3
	)
	,(
	8
	,'norint'
	,3
	)
	,(
	9
	,'jwang'
	,4
	)
	,(
	10
	,'malexander'
	,4
	);

CREATE TABLE #NewOrg (
	OrgNode HIERARCHYID
	,EmployeeID INT
	,LoginID NVARCHAR(50)
	,ManagerID INT CONSTRAINT PK_#NewOrg_OrgNode PRIMARY KEY CLUSTERED (OrgNode)
	);
GO

CREATE TABLE #Children (
	EmployeeID INT
	,ManagerID INT
	,Num INT
	);
GO

CREATE CLUSTERED INDEX tmpind ON #Children (
	ManagerID
	,EmployeeID
	);
GO

INSERT #Children (
	EmployeeID
	,ManagerID
	,Num
	)
SELECT EmployeeID
	,ManagerID
	,ROW_NUMBER() OVER (
		PARTITION BY ManagerID ORDER BY ManagerID
		)
FROM #EmployeeDemo
GO

WITH paths (
	path
	,EmployeeID
	)
AS (
	-- This section provides the value for the root of the hierarchy
	SELECT HIERARCHYID::GetRoot() AS OrgNode
		,EmployeeID
	FROM #Children AS C
	WHERE ManagerID IS NULL
	
	UNION ALL
	
	-- This section provides values for all nodes except the root
	SELECT CAST(p.path.ToString() + CAST(C.Num AS VARCHAR(30)) + '/' AS HIERARCHYID)
		,C.EmployeeID
	FROM #Children AS C
	JOIN paths AS p ON C.ManagerID = P.EmployeeID
	)
INSERT #NewOrg (
	OrgNode
	,O.EmployeeID
	,O.LoginID
	,O.ManagerID
	)
SELECT P.path
	,O.EmployeeID
	,O.LoginID
	,O.ManagerID
FROM #EmployeeDemo AS O
JOIN Paths AS P ON O.EmployeeID = P.EmployeeID
GO

SELECT OrgNode.ToString() AS LogicalNode
	,*
FROM #NewOrg
ORDER BY LogicalNode;
GO

DROP TABLE #Children

DROP TABLE #EmployeeDemo

DROP TABLE #NewOrg
GO

--Geography Stuff:
-- http://msdn.microsoft.com/en-us/library/cc280766.aspx
CREATE TABLE #SpatialTable (
	id INT IDENTITY(1, 1)
	,GeogCol1 GEOGRAPHY
	,GeogCol2 AS GeogCol1.STAsText()
	);
GO

INSERT INTO #SpatialTable (GeogCol1)
VALUES (GEOGRAPHY::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656 )', 4326));

INSERT INTO #SpatialTable (GeogCol1)
VALUES (GEOGRAPHY::STGeomFromText('POLYGON((-122.358 47.653 , -122.348 47.649, -122.348 47.658, -122.358 47.658, -122.358 47.653))', 4326));
GO

DECLARE @geog1 GEOGRAPHY;
DECLARE @geog2 GEOGRAPHY;
DECLARE @result GEOGRAPHY;

SELECT @geog1 = GeogCol1
FROM #SpatialTable
WHERE id = 1;

SELECT @geog2 = GeogCol1
FROM #SpatialTable
WHERE id = 2;

SELECT @result = @geog1.STIntersection(@geog2);

SELECT @result.STAsText();

DROP TABLE #SpatialTable
GO

SELECT Count(N)
FROM CounterTable

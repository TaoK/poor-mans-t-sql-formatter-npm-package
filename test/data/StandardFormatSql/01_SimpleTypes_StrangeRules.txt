--Miscellaneous tokenization challenges:
SELECT 'Tom''s Test' AS "Test ""Testing"" tests"

SELECT 1 AS [[Test]]]

SELECT 1e0 AS 'Test'

SELECT - 0 Zero0_IsOK

SELECT 1 x1IsJustANumber

SELECT 0x0A IsBinary

SELECT 1e * 1. OneAgain

SELECT 1.1 * .1 'LessThanOne'

SELECT 1 - 1 Subtracts

SELECT 1e-1 IsAFraction

SELECT 1e+1 IsTen

-- John Arnott's "T-SQL Parsing Crazy Eights" question
--  from SQLServerCentral's Question Of The Day quiz:
SELECT 1.8 E
	,1.8e
	,1.e ight
	,3 + 8e8 Eight
	,3 + 8 E8E
	,'Six' + 'Seven' 'Eight'
	,'Six' + 'Seven' + 'Eight'
	,8.8e ight
	,'Six''Seven' 'Eight'

--Interestingly, the SSMS (2005) syntax highlighter gets 
-- this one wrong, misses the AS... but it does fine if you 
-- replace the 0 with a 1!!
SELECT 0 AS A

--And another edge case where the SSMS syntax highlighting 
-- team and parser team don't quite see eye-to-eye...
SELECT 0.e AS A

--But here we're all friends again
SELECT 0.e- AS A

--Not sure whether we'll handle this correctly. the minus 
-- should probably end up "stuck" to its number... The rule 
-- would be something like "omit the space between minus and 
-- number when the thing before the number is neither a 
-- parenthesis expression, nor another number". Not sure it's 
-- worth handling this...
SELECT .0 + - 1.0 Test
	,- 1e0 "2nd"

--playing silly buggers with negative exponents
SELECT 1.1 * .1e-1 'ExponentionallyComplex'

--I have to include this just because of the fun insight into 
-- T-SQL processing. When you run this, the error message is 
-- "Incorrect syntax near '0x0a'." - so the tokenizer
-- converts the "0XA" to "0x0a" before the parser gets to the 
-- structure of the SQL, and doesn't appear to know that the 
-- value has changed! (or it would be too much of a pain to 
-- keep the original value around just for the error message...?)
SELECT '' AS 0xA

--This is a simplistic case that once caused a strange bug:
SELECT 0.0
GO

--These are just for verification of all new operators
DECLARE @Test INT = 10

SET @Test += 10;
SET @Test -= 10;
SET @Test /= 10
SET @Test *= 10
SET @Test %= 10

IF A >= B
	AND B <= A
	SET @Test |= 10

IF A == B
	SET @Test ^= 10

IF A != B
	SET @Test &= 10

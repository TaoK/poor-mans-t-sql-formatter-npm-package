-- Retrieved from http://ola.hallengren.com/
/*
Copyright (c) 2010 Ola Hallengren

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DatabaseBackup] @Databases NVARCHAR(max),
      @Directory NVARCHAR(max) = NULL,
      @BackupType NVARCHAR(max),
      @Verify NVARCHAR(max) = 'N',
      @CleanupTime INT = NULL,
      @Compress NVARCHAR(max) = NULL,
      @CopyOnly NVARCHAR(max) = 'N',
      @ChangeBackupType NVARCHAR(max) = 'N',
      @BackupSoftware NVARCHAR(max) = NULL,
      @CheckSum NVARCHAR(max) = 'N',
      @BlockSize INT = NULL,
      @BufferCount INT = NULL,
      @MaxTransferSize INT = NULL,
      @NumberOfFiles INT = 1,
      @CompressionLevel INT = NULL,
      @Description NVARCHAR(max) = NULL,
      @Threads INT = NULL,
      @Throttle INT = NULL,
      @Execute NVARCHAR(max) = 'Y'
AS
BEGIN
      ----------------------------------------------------------------------------------------------------
      --// Set options                                                                                //--
      ----------------------------------------------------------------------------------------------------
      SET NOCOUNT ON

      ----------------------------------------------------------------------------------------------------
      --// Declare variables                                                                          //--
      ----------------------------------------------------------------------------------------------------
      DECLARE @StartMessage NVARCHAR(max)
      DECLARE @EndMessage NVARCHAR(max)
      DECLARE @DatabaseMessage NVARCHAR(max)
      DECLARE @ErrorMessage NVARCHAR(max)
      DECLARE @Version NUMERIC(18, 10)
      DECLARE @DefaultDirectory NVARCHAR(4000)
      DECLARE @CheckDirectory NVARCHAR(4000)
      DECLARE @CurrentID INT
      DECLARE @CurrentDatabase NVARCHAR(max)
      DECLARE @CurrentBackupType NVARCHAR(max)
      DECLARE @CurrentFileExtension NVARCHAR(max)
      DECLARE @CurrentFileNumber INT
      DECLARE @CurrentDifferentialLSN NUMERIC(25, 0)
      DECLARE @CurrentLogLSN NUMERIC(25, 0)
      DECLARE @CurrentLatestBackup DATETIME
      DECLARE @CurrentDatabaseFS NVARCHAR(max)
      DECLARE @CurrentDirectory NVARCHAR(max)
      DECLARE @CurrentFilePath NVARCHAR(max)
      DECLARE @CurrentDate DATETIME
      DECLARE @CurrentCleanupDate DATETIME
      DECLARE @CurrentIsDatabaseAccessible BIT
      DECLARE @CurrentMirroringRole NVARCHAR(max)
      DECLARE @CurrentCommand01 NVARCHAR(max)
      DECLARE @CurrentCommand02 NVARCHAR(max)
      DECLARE @CurrentCommand03 NVARCHAR(max)
      DECLARE @CurrentCommand04 NVARCHAR(max)
      DECLARE @CurrentCommandOutput01 INT
      DECLARE @CurrentCommandOutput02 INT
      DECLARE @CurrentCommandOutput03 INT
      DECLARE @CurrentCommandOutput04 INT
      DECLARE @DirectoryInfo TABLE (
            FileExists BIT,
            FileIsADirectory BIT,
            ParentDirectoryExists BIT
            )
      DECLARE @tmpDatabases TABLE (
            ID INT IDENTITY PRIMARY KEY,
            DatabaseName NVARCHAR(max),
            Completed BIT
            )
      DECLARE @CurrentFiles TABLE (CurrentFilePath NVARCHAR(max))
      DECLARE @Error INT

      SET @Error = 0
      SET @Version = CAST(LEFT(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(max)), CHARINDEX('.', CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(max))) - 1) + '.' + REPLACE(RIGHT(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(max)), LEN(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(max))) - CHARINDEX('.', CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(max)))), '.', '') AS NUMERIC(18, 10))
      ----------------------------------------------------------------------------------------------------
      --// Log initial information                                                                    //--
      ----------------------------------------------------------------------------------------------------
      SET @StartMessage = 'DateTime: ' + CONVERT(NVARCHAR, GETDATE(), 120) + CHAR(13) + CHAR(10)
      SET @StartMessage = @StartMessage + 'Server: ' + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR) + CHAR(13) + CHAR(10)
      SET @StartMessage = @StartMessage + 'Version: ' + CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR) + CHAR(13) + CHAR(10)
      SET @StartMessage = @StartMessage + 'Edition: ' + CAST(SERVERPROPERTY('Edition') AS NVARCHAR) + CHAR(13) + CHAR(10)
      SET @StartMessage = @StartMessage + 'Procedure: ' + QUOTENAME(DB_NAME(DB_ID())) + '.' + (
                  SELECT QUOTENAME(sys.schemas.NAME)
                  FROM sys.schemas
                  INNER JOIN sys.objects
                        ON sys.schemas.[schema_id] = sys.objects.[schema_id]
                  WHERE [object_id] = @@PROCID
                  ) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)) + CHAR(13) + CHAR(10)
      SET @StartMessage = @StartMessage + 'Parameters: @Databases = ' + ISNULL('''' + REPLACE(@Databases, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @Directory = ' + ISNULL('''' + REPLACE(@Directory, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @BackupType = ' + ISNULL('''' + REPLACE(@BackupType, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @Verify = ' + ISNULL('''' + REPLACE(@Verify, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @CleanupTime = ' + ISNULL(CAST(@CleanupTime AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @Compress = ' + ISNULL('''' + REPLACE(@Compress, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @CopyOnly = ' + ISNULL('''' + REPLACE(@CopyOnly, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @ChangeBackupType = ' + ISNULL('''' + REPLACE(@ChangeBackupType, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @BackupSoftware = ' + ISNULL('''' + REPLACE(@BackupSoftware, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @CheckSum = ' + ISNULL('''' + REPLACE(@CheckSum, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @BlockSize = ' + ISNULL(CAST(@BlockSize AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @BufferCount = ' + ISNULL(CAST(@BufferCount AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @MaxTransferSize = ' + ISNULL(CAST(@MaxTransferSize AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @NumberOfFiles = ' + ISNULL(CAST(@NumberOfFiles AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @CompressionLevel = ' + ISNULL(CAST(@CompressionLevel AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @Description = ' + ISNULL('''' + REPLACE(@Description, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + ', @Threads = ' + ISNULL(CAST(@Threads AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @Throttle = ' + ISNULL(CAST(@Throttle AS NVARCHAR), 'NULL')
      SET @StartMessage = @StartMessage + ', @Execute = ' + ISNULL('''' + REPLACE(@Execute, '''', '''''') + '''', 'NULL')
      SET @StartMessage = @StartMessage + CHAR(13) + CHAR(10)
      SET @StartMessage = REPLACE(@StartMessage, '%', '%%')

      RAISERROR (
                  @StartMessage,
                  10,
                  1
                  )
      WITH NOWAIT

      ----------------------------------------------------------------------------------------------------
      --// Select databases                                                                           //--
      ----------------------------------------------------------------------------------------------------
      IF @Databases IS NULL
            OR @Databases = ''
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Databases is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      INSERT INTO @tmpDatabases (
            DatabaseName,
            Completed
            )
      SELECT DatabaseName AS DatabaseName,
            0 AS Completed
      FROM dbo.DatabaseSelect(@Databases)
      ORDER BY DatabaseName ASC

      IF @@ERROR <> 0
            OR (
                  @@ROWCOUNT = 0
                  AND @Databases <> 'USER_DATABASES'
                  )
      BEGIN
            SET @ErrorMessage = 'Error selecting databases.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      SET @ErrorMessage = ''

      SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '
      FROM @tmpDatabases
      WHERE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(DatabaseName, '\', ''), '/', ''), ':', ''), '*', ''), '?', ''), '"', ''), '<', ''), '>', ''), '|', ''), ' ', '') = ''
      ORDER BY DatabaseName ASC

      IF @@ROWCOUNT > 0
      BEGIN
            SET @ErrorMessage = 'The names of the following databases are not supported; ' + LEFT(@ErrorMessage, LEN(@ErrorMessage) - 1) + '.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      SET @ErrorMessage = '';

      WITH tmpDatabasesCTE
      AS (
            SELECT NAME AS DatabaseName,
                  UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(NAME, '\', ''), '/', ''), ':', ''), '*', ''), '?', ''), '"', ''), '<', ''), '>', ''), '|', ''), ' ', '')) AS DatabaseNameFS
            FROM sys.databases
            )
      SELECT @ErrorMessage = @ErrorMessage + QUOTENAME(DatabaseName) + ', '
      FROM tmpDatabasesCTE
      WHERE DatabaseNameFS IN (
                  SELECT DatabaseNameFS
                  FROM tmpDatabasesCTE
                  GROUP BY DatabaseNameFS
                  HAVING COUNT(*) > 1
                  )
            AND DatabaseNameFS IN (
                  SELECT UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(DatabaseName COLLATE DATABASE_DEFAULT, '\', ''), '/', ''), ':', ''), '*', ''), '?', ''), '"', ''), '<', ''), '>', ''), '|', ''), ' ', ''))
                  FROM @tmpDatabases
                  )
            AND DatabaseNameFS <> ''
      ORDER BY DatabaseNameFS ASC,
            DatabaseName ASC

      IF @@ROWCOUNT > 0
      BEGIN
            SET @ErrorMessage = 'The names of the following databases are not unique in the file system; ' + LEFT(@ErrorMessage, LEN(@ErrorMessage) - 1) + '.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      ----------------------------------------------------------------------------------------------------
      --// Get default backup directory                                                               //--
      ----------------------------------------------------------------------------------------------------
      IF @Directory IS NULL
      BEGIN
            EXECUTE [master].dbo.xp_instance_regread N'HKEY_LOCAL_MACHINE',
                  N'SOFTWARE\Microsoft\MSSQLServer\MSSQLServer',
                  N'BackupDirectory',
                  @DefaultDirectory OUTPUT

            SET @Directory = @DefaultDirectory
      END

      ----------------------------------------------------------------------------------------------------
      --// Get default compression                                                                    //--
      ----------------------------------------------------------------------------------------------------
      IF @Compress IS NULL
      BEGIN
            SELECT @Compress = CASE 
                        WHEN @BackupSoftware IS NULL
                              AND EXISTS (
                                    SELECT *
                                    FROM sys.configurations
                                    WHERE NAME = 'backup compression default'
                                          AND value_in_use = 1
                                    )
                              THEN 'Y'
                        WHEN @BackupSoftware IS NULL
                              AND NOT EXISTS (
                                    SELECT *
                                    FROM sys.configurations
                                    WHERE NAME = 'backup compression default'
                                          AND value_in_use = 1
                                    )
                              THEN 'N'
                        WHEN @BackupSoftware IS NOT NULL
                              AND (
                                    @CompressionLevel IS NULL
                                    OR @CompressionLevel > 0
                                    )
                              THEN 'Y'
                        WHEN @BackupSoftware IS NOT NULL
                              AND @CompressionLevel = 0
                              THEN 'N'
                        END
      END

      ----------------------------------------------------------------------------------------------------
      --// Check directory                                                                            //--
      ----------------------------------------------------------------------------------------------------
      IF NOT (
                  @Directory LIKE '_:'
                  OR @Directory LIKE '_:\%'
                  OR @Directory LIKE '\\%\%'
                  )
            OR @Directory IS NULL
            OR LEFT(@Directory, 1) = ' '
            OR RIGHT(@Directory, 1) = ' '
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Directory is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      SET @CheckDirectory = @Directory

      INSERT INTO @DirectoryInfo (
            FileExists,
            FileIsADirectory,
            ParentDirectoryExists
            )
      EXECUTE [master].dbo.xp_fileexist @CheckDirectory

      IF NOT EXISTS (
                  SELECT *
                  FROM @DirectoryInfo
                  WHERE FileExists = 0
                        AND FileIsADirectory = 1
                        AND ParentDirectoryExists = 1
                  )
      BEGIN
            SET @ErrorMessage = 'The directory does not exist.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      ----------------------------------------------------------------------------------------------------
      --// Check input parameters                                                                     //--
      ----------------------------------------------------------------------------------------------------
      IF @BackupType NOT IN (
                  'FULL',
                  'DIFF',
                  'LOG'
                  )
            OR @BackupType IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @BackupType is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @Verify NOT IN (
                  'Y',
                  'N'
                  )
            OR @Verify IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Verify is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @CleanupTime < 0
            OR (
                  @CleanupTime IS NOT NULL
                  AND @CopyOnly = 'Y'
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @CleanupTime is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @Compress NOT IN (
                  'Y',
                  'N'
                  )
            OR @Compress IS NULL
            OR (
                  @Compress = 'Y'
                  AND @BackupSoftware IS NULL
                  AND NOT (
                        (
                              @Version >= 10
                              AND @Version < 10.5
                              AND SERVERPROPERTY('EngineEdition') = 3
                              )
                        OR (
                              @Version >= 10.5
                              AND (
                                    SERVERPROPERTY('EngineEdition') = 3
                                    OR SERVERPROPERTY('EditionID') = - 1534726760
                                    )
                              )
                        )
                  )
            OR (
                  @Compress = 'N'
                  AND @BackupSoftware IS NOT NULL
                  AND (
                        @CompressionLevel IS NULL
                        OR @CompressionLevel >= 1
                        )
                  )
            OR (
                  @Compress = 'Y'
                  AND @BackupSoftware IS NOT NULL
                  AND @CompressionLevel = 0
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Compress is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @Compress = 'Y'
            AND @BackupSoftware IS NULL
            AND NOT (
                  (
                        @Version >= 10
                        AND @Version < 10.5
                        AND SERVERPROPERTY('EngineEdition') = 3
                        )
                  OR (
                        @Version >= 10.5
                        AND (
                              SERVERPROPERTY('EngineEdition') = 3
                              OR SERVERPROPERTY('EditionID') = - 1534726760
                              )
                        )
                  )
      BEGIN
            SET @ErrorMessage = 'Backup compression is only supported in SQL Server 2008 Enterprise and Developer Edition and in SQL Server 2008 R2 Standard, Enterprise, Developer and Datacenter Edition.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @CopyOnly NOT IN (
                  'Y',
                  'N'
                  )
            OR @CopyOnly IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @CopyOnly is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @ChangeBackupType NOT IN (
                  'Y',
                  'N'
                  )
            OR @ChangeBackupType IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @ChangeBackupType is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @BackupSoftware NOT IN (
                  'LITESPEED',
                  'SQLBACKUP',
                  'HYPERBAC',
                  'SQLSAFE'
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @BackupSoftware is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @BackupSoftware = 'LITESPEED'
            AND NOT EXISTS (
                  SELECT *
                  FROM [master].sys.objects
                  WHERE [type] = 'X'
                        AND [name] = 'xp_backup_database'
                  )
      BEGIN
            SET @ErrorMessage = 'LiteSpeed is not installed.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @BackupSoftware = 'SQLBACKUP'
            AND NOT EXISTS (
                  SELECT *
                  FROM [master].sys.objects
                  WHERE [type] = 'X'
                        AND [name] = 'sqlbackup'
                  )
      BEGIN
            SET @ErrorMessage = 'SQLBackup is not installed.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @BackupSoftware = 'SQLSAFE'
            AND NOT EXISTS (
                  SELECT *
                  FROM [master].sys.objects
                  WHERE [type] = 'X'
                        AND [name] = 'xp_ss_backup'
                  )
      BEGIN
            SET @ErrorMessage = 'SQLsafe is not installed.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @CheckSum NOT IN (
                  'Y',
                  'N'
                  )
            OR @CheckSum IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @CheckSum is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @BlockSize NOT IN (
                  512,
                  1024,
                  2048,
                  4096,
                  8192,
                  16384,
                  32768,
                  65536
                  )
            OR (
                  @BlockSize IS NOT NULL
                  AND @BackupSoftware = 'SQLBACKUP'
                  )
            OR (
                  @BlockSize IS NOT NULL
                  AND @BackupSoftware = 'SQLSAFE'
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @BlockSize is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @BufferCount <= 0
            OR @BufferCount > 2147483647
            OR (
                  @BufferCount IS NOT NULL
                  AND @BackupSoftware = 'SQLBACKUP'
                  )
            OR (
                  @BufferCount IS NOT NULL
                  AND @BackupSoftware = 'SQLSAFE'
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @BufferCount is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @MaxTransferSize < 65536
            OR @MaxTransferSize > 4194304
            OR @MaxTransferSize % 65536 > 0
            OR (
                  @MaxTransferSize IS NOT NULL
                  AND @BackupSoftware = 'SQLBACKUP'
                  )
            OR (
                  @MaxTransferSize IS NOT NULL
                  AND @BackupSoftware = 'SQLSAFE'
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @MaxTransferSize is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @NumberOfFiles < 1
            OR @NumberOfFiles > 64
            OR (
                  @NumberOfFiles > 32
                  AND @BackupSoftware = 'SQLBACKUP'
                  )
            OR @NumberOfFiles IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @NumberOfFiles is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF (
                  @BackupSoftware IS NULL
                  AND @CompressionLevel IS NOT NULL
                  )
            OR (
                  @BackupSoftware = 'HYPERBAC'
                  AND @CompressionLevel IS NOT NULL
                  )
            OR (
                  @BackupSoftware = 'LITESPEED'
                  AND (
                        @CompressionLevel < 0
                        OR @CompressionLevel > 10
                        )
                  )
            OR (
                  @BackupSoftware = 'SQLBACKUP'
                  AND (
                        @CompressionLevel < 0
                        OR @CompressionLevel > 4
                        )
                  )
            OR (
                  @BackupSoftware = 'SQLSAFE'
                  AND (
                        @CompressionLevel < 1
                        OR @CompressionLevel > 4
                        )
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @CompressionLevel is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF LEN(@Description) > 255
            OR (
                  @BackupSoftware = 'LITESPEED'
                  AND LEN(@Description) > 128
                  )
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Description is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @Threads IS NOT NULL
            AND (
                  @BackupSoftware NOT IN (
                        'LITESPEED',
                        'SQLBACKUP',
                        'SQLSAFE'
                        )
                  OR @BackupSoftware IS NULL
                  )
            OR @Threads < 2
            OR @Threads > 32
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Threads is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @Throttle IS NOT NULL
            AND (
                  @BackupSoftware NOT IN ('LITESPEED')
                  OR @BackupSoftware IS NULL
                  )
            OR @Throttle < 1
            OR @Throttle > 100
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Throttle is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      IF @Execute NOT IN (
                  'Y',
                  'N'
                  )
            OR @Execute IS NULL
      BEGIN
            SET @ErrorMessage = 'The value for parameter @Execute is not supported.' + CHAR(13) + CHAR(10)

            RAISERROR (
                        @ErrorMessage,
                        16,
                        1
                        )
            WITH NOWAIT

            SET @Error = @@ERROR
      END

      ----------------------------------------------------------------------------------------------------
      --// Check error variable                                                                       //--
      ----------------------------------------------------------------------------------------------------
      IF @Error <> 0
            GOTO Logging

      ----------------------------------------------------------------------------------------------------
      --// Execute backup commands                                                                    //--
      ----------------------------------------------------------------------------------------------------
      WHILE EXISTS (
                  SELECT *
                  FROM @tmpDatabases
                  WHERE Completed = 0
                  )
      BEGIN
            SELECT TOP 1 @CurrentID = ID,
                  @CurrentDatabase = DatabaseName
            FROM @tmpDatabases
            WHERE Completed = 0
            ORDER BY ID ASC

            IF EXISTS (
                        SELECT *
                        FROM sys.database_recovery_status
                        WHERE database_id = DB_ID(@CurrentDatabase)
                              AND database_guid IS NOT NULL
                        )
            BEGIN
                  SET @CurrentIsDatabaseAccessible = 1
            END
            ELSE
            BEGIN
                  SET @CurrentIsDatabaseAccessible = 0
            END

            SELECT @CurrentMirroringRole = mirroring_role_desc
            FROM sys.database_mirroring
            WHERE database_id = DB_ID(@CurrentDatabase)

            SELECT @CurrentDifferentialLSN = differential_base_lsn
            FROM sys.master_files
            WHERE database_id = DB_ID(@CurrentDatabase)
                  AND [type] = 0
                  AND [file_id] = 1

            -- Workaround for a bug in SQL Server 2005
            IF @Version >= 9
                  AND @Version < 10
                  AND (
                        SELECT differential_base_lsn
                        FROM sys.master_files
                        WHERE database_id = DB_ID(@CurrentDatabase)
                              AND [type] = 0
                              AND [file_id] = 1
                        ) = (
                        SELECT differential_base_lsn
                        FROM sys.master_files
                        WHERE database_id = DB_ID('model')
                              AND [type] = 0
                              AND [file_id] = 1
                        )
                  AND (
                        SELECT differential_base_guid
                        FROM sys.master_files
                        WHERE database_id = DB_ID(@CurrentDatabase)
                              AND [type] = 0
                              AND [file_id] = 1
                        ) = (
                        SELECT differential_base_guid
                        FROM sys.master_files
                        WHERE database_id = DB_ID('model')
                              AND [type] = 0
                              AND [file_id] = 1
                        )
                  AND (
                        SELECT differential_base_time
                        FROM sys.master_files
                        WHERE database_id = DB_ID(@CurrentDatabase)
                              AND [type] = 0
                              AND [file_id] = 1
                        ) IS NULL
            BEGIN
                  SET @CurrentDifferentialLSN = NULL
            END

            -- If a VSS snapshot has been taken since the last full backup, a differential backup cannot be performed
            IF EXISTS (
                        SELECT *
                        FROM msdb.dbo.backupset
                        WHERE database_name = @CurrentDatabase
                              AND [type] = 'D'
                              AND is_snapshot = 1
                              AND checkpoint_lsn = @CurrentDifferentialLSN
                        )
            BEGIN
                  SET @CurrentDifferentialLSN = NULL
            END

            SELECT @CurrentLogLSN = last_log_backup_lsn
            FROM sys.database_recovery_status
            WHERE database_id = DB_ID(@CurrentDatabase)

            SET @CurrentBackupType = @BackupType

            IF @ChangeBackupType = 'Y'
            BEGIN
                  IF @CurrentBackupType = 'LOG'
                        AND DATABASEPROPERTYEX(@CurrentDatabase, 'Recovery') <> 'SIMPLE'
                        AND @CurrentLogLSN IS NULL
                        AND @CurrentDatabase <> 'master'
                  BEGIN
                        SET @CurrentBackupType = 'DIFF'
                  END

                  IF @CurrentBackupType = 'DIFF'
                        AND @CurrentDifferentialLSN IS NULL
                        AND @CurrentDatabase <> 'master'
                  BEGIN
                        SET @CurrentBackupType = 'FULL'
                  END
            END

            SELECT @CurrentLatestBackup = MAX(backup_finish_date)
            FROM msdb.dbo.backupset
            WHERE [type] IN (
                        'D',
                        'I'
                        )
                  AND is_copy_only = 0
                  AND is_snapshot = 0
                  AND is_damaged = 0
                  AND database_name = @CurrentDatabase

            -- Set database message
            SET @DatabaseMessage = 'DateTime: ' + CONVERT(NVARCHAR, GETDATE(), 120) + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Database: ' + QUOTENAME(@CurrentDatabase) + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Status: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabase, 'Status') AS NVARCHAR) + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Mirroring role: ' + ISNULL(@CurrentMirroringRole, 'None') + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Standby: ' + CASE 
                        WHEN DATABASEPROPERTYEX(@CurrentDatabase, 'IsInStandBy') = 1
                              THEN 'Yes'
                        ELSE 'No'
                        END + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Updateability: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabase, 'Updateability') AS NVARCHAR) + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'User access: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabase, 'UserAccess') AS NVARCHAR) + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Is accessible: ' + CASE 
                        WHEN @CurrentIsDatabaseAccessible = 1
                              THEN 'Yes'
                        ELSE 'No'
                        END + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Recovery model: ' + CAST(DATABASEPROPERTYEX(@CurrentDatabase, 'Recovery') AS NVARCHAR) + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Differential base LSN: ' + ISNULL(CAST(@CurrentDifferentialLSN AS NVARCHAR), 'NULL') + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = @DatabaseMessage + 'Last log backup LSN: ' + ISNULL(CAST(@CurrentLogLSN AS NVARCHAR), 'NULL') + CHAR(13) + CHAR(10)
            SET @DatabaseMessage = REPLACE(@DatabaseMessage, '%', '%%')

            RAISERROR (
                        @DatabaseMessage,
                        10,
                        1
                        )
            WITH NOWAIT

            IF DATABASEPROPERTYEX(@CurrentDatabase, 'Status') = 'ONLINE'
                  AND NOT (
                        DATABASEPROPERTYEX(@CurrentDatabase, 'UserAccess') = 'SINGLE_USER'
                        AND @CurrentIsDatabaseAccessible = 0
                        )
                  AND DATABASEPROPERTYEX(@CurrentDatabase, 'IsInStandBy') = 0
                  AND NOT (
                        @CurrentBackupType = 'LOG'
                        AND (
                              DATABASEPROPERTYEX(@CurrentDatabase, 'Recovery') = 'SIMPLE'
                              OR @CurrentLogLSN IS NULL
                              )
                        )
                  AND NOT (
                        @CurrentBackupType = 'DIFF'
                        AND @CurrentDifferentialLSN IS NULL
                        )
                  AND NOT (
                        @CurrentBackupType IN (
                              'DIFF',
                              'LOG'
                              )
                        AND @CurrentDatabase = 'master'
                        )
            BEGIN
                  -- Set variables
                  SET @CurrentDate = GETDATE()

                  IF @CleanupTime IS NULL
                        OR (
                              @CurrentBackupType = 'LOG'
                              AND @CurrentLatestBackup IS NULL
                              )
                  BEGIN
                        SET @CurrentCleanupDate = NULL
                  END
                  ELSE IF @CurrentBackupType = 'LOG'
                  BEGIN
                        SET @CurrentCleanupDate = (
                                    SELECT MIN([Date])
                                    FROM (
                                          SELECT DATEADD(hh, - (@CleanupTime), @CurrentDate) AS [Date]
                                          
                                          UNION
                                          
                                          SELECT @CurrentLatestBackup AS [Date]
                                          ) Dates
                                    )
                  END
                  ELSE
                  BEGIN
                        SET @CurrentCleanupDate = DATEADD(hh, - (@CleanupTime), @CurrentDate)
                  END

                  SET @CurrentDatabaseFS = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@CurrentDatabase, '\', ''), '/', ''), ':', ''), '*', ''), '?', ''), '"', ''), '<', ''), '>', ''), '|', ''), ' ', '')

                  SELECT @CurrentFileExtension = CASE 
                              WHEN @BackupSoftware IS NULL
                                    AND @CurrentBackupType = 'FULL'
                                    THEN 'bak'
                              WHEN @BackupSoftware IS NULL
                                    AND @CurrentBackupType = 'DIFF'
                                    THEN 'bak'
                              WHEN @BackupSoftware IS NULL
                                    AND @CurrentBackupType = 'LOG'
                                    THEN 'trn'
                              WHEN @BackupSoftware = 'LITESPEED'
                                    AND @CurrentBackupType = 'FULL'
                                    THEN 'bak'
                              WHEN @BackupSoftware = 'LITESPEED'
                                    AND @CurrentBackupType = 'DIFF'
                                    THEN 'bak'
                              WHEN @BackupSoftware = 'LITESPEED'
                                    AND @CurrentBackupType = 'LOG'
                                    THEN 'trn'
                              WHEN @BackupSoftware = 'SQLBACKUP'
                                    AND @CurrentBackupType = 'FULL'
                                    THEN 'sqb'
                              WHEN @BackupSoftware = 'SQLBACKUP'
                                    AND @CurrentBackupType = 'DIFF'
                                    THEN 'sqb'
                              WHEN @BackupSoftware = 'SQLBACKUP'
                                    AND @CurrentBackupType = 'LOG'
                                    THEN 'sqb'
                              WHEN @BackupSoftware = 'HYPERBAC'
                                    AND @CurrentBackupType = 'FULL'
                                    THEN 'hbc'
                              WHEN @BackupSoftware = 'HYPERBAC'
                                    AND @CurrentBackupType = 'DIFF'
                                    THEN 'hbc'
                              WHEN @BackupSoftware = 'HYPERBAC'
                                    AND @CurrentBackupType = 'LOG'
                                    THEN 'hbc'
                              WHEN @BackupSoftware = 'SQLSAFE'
                                    AND @CurrentBackupType = 'FULL'
                                    THEN 'safe'
                              WHEN @BackupSoftware = 'SQLSAFE'
                                    AND @CurrentBackupType = 'DIFF'
                                    THEN 'safe'
                              WHEN @BackupSoftware = 'SQLSAFE'
                                    AND @CurrentBackupType = 'LOG'
                                    THEN 'safe'
                              END

                  SET @CurrentDirectory = @Directory + CASE 
                              WHEN RIGHT(@Directory, 1) = '\'
                                    THEN ''
                              ELSE '\'
                              END + REPLACE(CAST(SERVERPROPERTY('servername') AS NVARCHAR), '\', '$') + '\' + @CurrentDatabaseFS + '\' + UPPER(@CurrentBackupType)
                  SET @CurrentFileNumber = 0

                  WHILE @CurrentFileNumber < @NumberOfFiles
                  BEGIN
                        SET @CurrentFileNumber = @CurrentFileNumber + 1
                        SET @CurrentFilePath = @CurrentDirectory + '\' + REPLACE(CAST(SERVERPROPERTY('servername') AS NVARCHAR), '\', '$') + '_' + @CurrentDatabaseFS + '_' + UPPER(@CurrentBackupType) + '_' + REPLACE(REPLACE(REPLACE((CONVERT(NVARCHAR, @CurrentDate, 120)), '-', ''), ' ', '_'), ':', '') + CASE 
                                    WHEN @NumberOfFiles > 1
                                          AND @NumberOfFiles <= 9
                                          THEN '_' + CAST(@CurrentFileNumber AS NVARCHAR)
                                    WHEN @NumberOfFiles >= 10
                                          THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS NVARCHAR), 2)
                                    ELSE ''
                                    END + '.' + @CurrentFileExtension

                        IF LEN(@CurrentFilePath) > 259
                        BEGIN
                              SET @CurrentFilePath = @CurrentDirectory + '\' + REPLACE(CAST(SERVERPROPERTY('servername') AS NVARCHAR), '\', '$') + '_' + LEFT(@CurrentDatabaseFS, CASE 
                                                WHEN (LEN(@CurrentDatabaseFS) + 259 - LEN(@CurrentFilePath) - 3) < 20
                                                      THEN 20
                                                ELSE (LEN(@CurrentDatabaseFS) + 259 - LEN(@CurrentFilePath) - 3)
                                                END) + '...' + '_' + UPPER(@CurrentBackupType) + '_' + REPLACE(REPLACE(REPLACE((CONVERT(NVARCHAR, @CurrentDate, 120)), '-', ''), ' ', '_'), ':', '') + CASE 
                                          WHEN @NumberOfFiles > 1
                                                AND @NumberOfFiles <= 9
                                                THEN '_' + CAST(@CurrentFileNumber AS NVARCHAR)
                                          WHEN @NumberOfFiles >= 10
                                                THEN '_' + RIGHT('0' + CAST(@CurrentFileNumber AS NVARCHAR), 2)
                                          ELSE ''
                                          END + '.' + @CurrentFileExtension
                        END

                        INSERT INTO @CurrentFiles (CurrentFilePath)
                        SELECT @CurrentFilePath
                  END

                  -- Create directory
                  SET @CurrentCommand01 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_create_subdir N''' + REPLACE(@CurrentDirectory, '''', '''''') + ''' IF @ReturnCode <> 0 RAISERROR(''Error creating directory.'', 16, 1)'

                  EXECUTE @CurrentCommandOutput01 = [dbo].[CommandExecute] @CurrentCommand01,
                        '',
                        1,
                        @Execute

                  SET @Error = @@ERROR

                  IF @Error <> 0
                        SET @CurrentCommandOutput01 = @Error

                  -- Perform a backup
                  IF @CurrentCommandOutput01 = 0
                  BEGIN
                        IF @BackupSoftware IS NULL
                        BEGIN
                              SELECT @CurrentCommand02 = CASE 
                                          WHEN @CurrentBackupType IN (
                                                      'DIFF',
                                                      'FULL'
                                                      )
                                                THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabase) + ' TO'
                                          WHEN @CurrentBackupType = 'LOG'
                                                THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabase) + ' TO'
                                          END

                              SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '

                              IF @CheckSum = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'

                              IF @CheckSum = 'N'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'

                              IF @Compress = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', COMPRESSION'

                              IF @Compress = 'N'
                                    AND @Version >= 10
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', NO_COMPRESSION'

                              IF @CurrentBackupType = 'DIFF'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'

                              IF @CopyOnly = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'

                              IF @BlockSize IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS NVARCHAR)

                              IF @BufferCount IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', BUFFERCOUNT = ' + CAST(@BufferCount AS NVARCHAR)

                              IF @MaxTransferSize IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS NVARCHAR)

                              IF @Description IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description, '''', '''''') + ''''
                        END

                        IF @BackupSoftware = 'LITESPEED'
                        BEGIN
                              SELECT @CurrentCommand02 = CASE 
                                          WHEN @CurrentBackupType IN (
                                                      'DIFF',
                                                      'FULL'
                                                      )
                                                THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_backup_database @database = N''' + REPLACE(@CurrentDatabase, '''', '''''') + ''''
                                          WHEN @CurrentBackupType = 'LOG'
                                                THEN 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_backup_log @database = N''' + REPLACE(@CurrentDatabase, '''', '''''') + ''''
                                          END

                              SELECT @CurrentCommand02 = @CurrentCommand02 + ', @filename = N''' + REPLACE(CurrentFilePath, '''', '''''') + ''''
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand02 = @CurrentCommand02 + ', @with = '''

                              IF @CheckSum = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'

                              IF @CheckSum = 'N'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'

                              IF @CurrentBackupType = 'DIFF'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'

                              IF @CopyOnly = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'

                              IF @BlockSize IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS NVARCHAR)

                              IF @BufferCount IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', BUFFERCOUNT = ' + CAST(@BufferCount AS NVARCHAR)

                              IF @MaxTransferSize IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS NVARCHAR)
                              SET @CurrentCommand02 = @CurrentCommand02 + ''''

                              IF @CompressionLevel IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @compressionlevel = ' + CAST(@CompressionLevel AS NVARCHAR)

                              IF @Threads IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @threads = ' + CAST(@Threads AS NVARCHAR)

                              IF @Throttle IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @throttle = ' + CAST(@Throttle AS NVARCHAR)

                              IF @Description IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @desc = N''' + REPLACE(@Description, '''', '''''') + ''''
                              SET @CurrentCommand02 = @CurrentCommand02 + ' IF @ReturnCode <> 0 RAISERROR(''Error performing LiteSpeed backup.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'SQLBACKUP'
                        BEGIN
                              SELECT @CurrentCommand02 = CASE 
                                          WHEN @CurrentBackupType IN (
                                                      'DIFF',
                                                      'FULL'
                                                      )
                                                THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabase) + ' TO'
                                          WHEN @CurrentBackupType = 'LOG'
                                                THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabase) + ' TO'
                                          END

                              SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '

                              IF @CheckSum = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'

                              IF @CheckSum = 'N'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'

                              IF @CurrentBackupType = 'DIFF'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'

                              IF @CopyOnly = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'

                              IF @CompressionLevel IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', COMPRESSION = ' + CAST(@CompressionLevel AS NVARCHAR)

                              IF @Threads IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', THREADCOUNT = ' + CAST(@Threads AS NVARCHAR)

                              IF @Description IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description, '''', '''''') + ''''
                              SET @CurrentCommand02 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master..sqlbackup N''-SQL "' + REPLACE(@CurrentCommand02, '''', '''''') + '"''' + ' IF @ReturnCode <> 0 RAISERROR(''Error performing SQLBackup backup.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'HYPERBAC'
                        BEGIN
                              SELECT @CurrentCommand02 = CASE 
                                          WHEN @CurrentBackupType IN (
                                                      'DIFF',
                                                      'FULL'
                                                      )
                                                THEN 'BACKUP DATABASE ' + QUOTENAME(@CurrentDatabase) + ' TO'
                                          WHEN @CurrentBackupType = 'LOG'
                                                THEN 'BACKUP LOG ' + QUOTENAME(@CurrentDatabase) + ' TO'
                                          END

                              SELECT @CurrentCommand02 = @CurrentCommand02 + ' DISK = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand02 = @CurrentCommand02 + ' WITH '

                              IF @CheckSum = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'CHECKSUM'

                              IF @CheckSum = 'N'
                                    SET @CurrentCommand02 = @CurrentCommand02 + 'NO_CHECKSUM'

                              IF @CurrentBackupType = 'DIFF'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DIFFERENTIAL'

                              IF @CopyOnly = 'Y'
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', COPY_ONLY'

                              IF @BlockSize IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', BLOCKSIZE = ' + CAST(@BlockSize AS NVARCHAR)

                              IF @BufferCount IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', BUFFERCOUNT = ' + CAST(@BufferCount AS NVARCHAR)

                              IF @MaxTransferSize IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', MAXTRANSFERSIZE = ' + CAST(@MaxTransferSize AS NVARCHAR)

                              IF @Description IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', DESCRIPTION = N''' + REPLACE(@Description, '''', '''''') + ''''
                        END

                        IF @BackupSoftware = 'SQLSAFE'
                        BEGIN
                              SET @CurrentCommand02 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_ss_backup @database = N''' + REPLACE(@CurrentDatabase, '''', '''''') + ''''

                              SELECT @CurrentCommand02 = @CurrentCommand02 + ', ' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) = 1
                                                THEN '@filename'
                                          ELSE '@backupfile'
                                          END + ' = N''' + REPLACE(CurrentFilePath, '''', '''''') + ''''
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand02 = @CurrentCommand02 + ', @backuptype = ' + CASE 
                                          WHEN @CurrentBackupType = 'FULL'
                                                THEN '''Full'''
                                          WHEN @CurrentBackupType = 'DIFF'
                                                THEN '''Differential'''
                                          WHEN @CurrentBackupType = 'LOG'
                                                THEN '''Log'''
                                          END
                              SET @CurrentCommand02 = @CurrentCommand02 + ', @checksum = ' + CASE 
                                          WHEN @CheckSum = 'Y'
                                                THEN '1'
                                          WHEN @CheckSum = 'N'
                                                THEN '0'
                                          END
                              SET @CurrentCommand02 = @CurrentCommand02 + ', @copyonly = ' + CASE 
                                          WHEN @CopyOnly = 'Y'
                                                THEN '1'
                                          WHEN @CopyOnly = 'N'
                                                THEN '0'
                                          END

                              IF @CompressionLevel IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @compressionlevel = ' + CAST(@CompressionLevel AS NVARCHAR)

                              IF @Threads IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @threads = ' + CAST(@Threads AS NVARCHAR)

                              IF @Description IS NOT NULL
                                    SET @CurrentCommand02 = @CurrentCommand02 + ', @desc = N''' + REPLACE(@Description, '''', '''''') + ''''
                              SET @CurrentCommand02 = @CurrentCommand02 + ' IF @ReturnCode <> 0 RAISERROR(''Error performing SQLsafe backup.'', 16, 1)'
                        END

                        EXECUTE @CurrentCommandOutput02 = [dbo].[CommandExecute] @CurrentCommand02,
                              '',
                              1,
                              @Execute

                        SET @Error = @@ERROR

                        IF @Error <> 0
                              SET @CurrentCommandOutput02 = @Error
                  END

                  -- Verify the backup
                  IF @CurrentCommandOutput02 = 0
                        AND @Verify = 'Y'
                  BEGIN
                        IF @BackupSoftware IS NULL
                        BEGIN
                              SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

                              SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC
                        END

                        IF @BackupSoftware = 'LITESPEED'
                        BEGIN
                              SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_restore_verifyonly'

                              SELECT @CurrentCommand03 = @CurrentCommand03 + ' @filename = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand03 = @CurrentCommand03 + ' IF @ReturnCode <> 0 RAISERROR(''Error verifying LiteSpeed backup.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'SQLBACKUP'
                        BEGIN
                              SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

                              SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master..sqlbackup N''-SQL "' + REPLACE(@CurrentCommand03, '''', '''''') + '"''' + ' IF @ReturnCode <> 0 RAISERROR(''Error verifying SQLBackup backup.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'HYPERBAC'
                        BEGIN
                              SET @CurrentCommand03 = 'RESTORE VERIFYONLY FROM'

                              SELECT @CurrentCommand03 = @CurrentCommand03 + ' DISK = N''' + REPLACE(CurrentFilePath, '''', '''''') + '''' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) <> @NumberOfFiles
                                                THEN ','
                                          ELSE ''
                                          END
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC
                        END

                        IF @BackupSoftware = 'SQLSAFE'
                        BEGIN
                              SET @CurrentCommand03 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_ss_verify @database = N''' + REPLACE(@CurrentDatabase, '''', '''''') + ''''

                              SELECT @CurrentCommand03 = @CurrentCommand03 + ', ' + CASE 
                                          WHEN ROW_NUMBER() OVER (
                                                      ORDER BY CurrentFilePath ASC
                                                      ) = 1
                                                THEN '@filename'
                                          ELSE '@backupfile'
                                          END + ' = N''' + REPLACE(CurrentFilePath, '''', '''''') + ''''
                              FROM @CurrentFiles
                              ORDER BY CurrentFilePath ASC

                              SET @CurrentCommand03 = @CurrentCommand03 + ' IF @ReturnCode <> 0 RAISERROR(''Error verifying SQLsafe backup.'', 16, 1)'
                        END

                        EXECUTE @CurrentCommandOutput03 = [dbo].[CommandExecute] @CurrentCommand03,
                              '',
                              1,
                              @Execute

                        SET @Error = @@ERROR

                        IF @Error <> 0
                              SET @CurrentCommandOutput03 = @Error
                  END

                  -- Delete old backup files
                  IF (
                              @CurrentCommandOutput02 = 0
                              AND @Verify = 'N'
                              AND @CurrentCleanupDate IS NOT NULL
                              )
                        OR (
                              @CurrentCommandOutput02 = 0
                              AND @Verify = 'Y'
                              AND @CurrentCommandOutput03 = 0
                              AND @CurrentCleanupDate IS NOT NULL
                              )
                  BEGIN
                        IF @BackupSoftware IS NULL
                        BEGIN
                              SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_delete_file 0, N''' + REPLACE(@CurrentDirectory, '''', '''''') + ''', ''' + @CurrentFileExtension + ''', ''' + CONVERT(NVARCHAR(19), @CurrentCleanupDate, 126) + ''' IF @ReturnCode <> 0 RAISERROR(''Error deleting files.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'LITESPEED'
                        BEGIN
                              SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_slssqlmaint N''-MAINTDEL -DELFOLDER "' + REPLACE(@CurrentDirectory, '''', '''''') + '" -DELEXTENSION "' + @CurrentFileExtension + '" -DELUNIT "' + CAST(DATEDIFF(mi, @CurrentCleanupDate, GETDATE()) + 1 AS NVARCHAR) + '" -DELUNITTYPE "minutes" -DELUSEAGE'' IF @ReturnCode <> 0 RAISERROR(''Error deleting LiteSpeed backup files.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'SQLBACKUP'
                        BEGIN
                              SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.sqbutility 1032, N''' + REPLACE(@CurrentDatabase, '''', '''''') + ''', N''' + REPLACE(@CurrentDirectory, '''', '''''') + ''', ''' + CASE 
                                          WHEN @CurrentBackupType = 'FULL'
                                                THEN 'D'
                                          WHEN @CurrentBackupType = 'DIFF'
                                                THEN 'I'
                                          WHEN @CurrentBackupType = 'LOG'
                                                THEN 'L'
                                          END + ''', ''' + CAST(DATEDIFF(hh, @CurrentCleanupDate, GETDATE()) + 1 AS NVARCHAR) + 'h'' IF @ReturnCode <> 0 RAISERROR(''Error deleting SQLBackup backup files.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'HYPERBAC'
                        BEGIN
                              SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_delete_file 0, N''' + REPLACE(@CurrentDirectory, '''', '''''') + ''', ''' + @CurrentFileExtension + ''', ''' + CONVERT(NVARCHAR(19), @CurrentCleanupDate, 126) + ''' IF @ReturnCode <> 0 RAISERROR(''Error deleting files.'', 16, 1)'
                        END

                        IF @BackupSoftware = 'SQLSAFE'
                        BEGIN
                              SET @CurrentCommand04 = 'DECLARE @ReturnCode int EXECUTE @ReturnCode = master.dbo.xp_ss_delete @filename = N''' + REPLACE(@CurrentDirectory, '''', '''''') + '\*.' + @CurrentFileExtension + ''', @age = ''' + CAST(DATEDIFF(mi, @CurrentCleanupDate, GETDATE()) + 1 AS NVARCHAR) + 'Minutes'' IF @ReturnCode <> 0 RAISERROR(''Error deleting SQLsafe backup files.'', 16, 1)'
                        END

                        EXECUTE @CurrentCommandOutput04 = [dbo].[CommandExecute] @CurrentCommand04,
                              '',
                              1,
                              @Execute

                        SET @Error = @@ERROR

                        IF @Error <> 0
                              SET @CurrentCommandOutput04 = @Error
                  END
            END

            -- Update that the database is completed
            UPDATE @tmpDatabases
            SET Completed = 1
            WHERE ID = @CurrentID

            -- Clear variables
            SET @CurrentID = NULL
            SET @CurrentDatabase = NULL
            SET @CurrentBackupType = NULL
            SET @CurrentFileExtension = NULL
            SET @CurrentFileNumber = NULL
            SET @CurrentDifferentialLSN = NULL
            SET @CurrentLogLSN = NULL
            SET @CurrentLatestBackup = NULL
            SET @CurrentDatabaseFS = NULL
            SET @CurrentDirectory = NULL
            SET @CurrentFilePath = NULL
            SET @CurrentDate = NULL
            SET @CurrentCleanupDate = NULL
            SET @CurrentIsDatabaseAccessible = NULL
            SET @CurrentMirroringRole = NULL
            SET @CurrentCommand01 = NULL
            SET @CurrentCommand02 = NULL
            SET @CurrentCommand03 = NULL
            SET @CurrentCommand04 = NULL
            SET @CurrentCommandOutput01 = NULL
            SET @CurrentCommandOutput02 = NULL
            SET @CurrentCommandOutput03 = NULL
            SET @CurrentCommandOutput04 = NULL

            DELETE
            FROM @CurrentFiles
      END

      ----------------------------------------------------------------------------------------------------
      --// Log completing information                                                                 //--
      ----------------------------------------------------------------------------------------------------
      Logging:

      SET @EndMessage = 'DateTime: ' + CONVERT(NVARCHAR, GETDATE(), 120)
      SET @EndMessage = REPLACE(@EndMessage, '%', '%%')

      RAISERROR (
                  @EndMessage,
                  10,
                  1
                  )
      WITH NOWAIT
            ----------------------------------------------------------------------------------------------------
END
GO



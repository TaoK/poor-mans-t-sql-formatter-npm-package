//End PASTED CONTENT from Poor Man's T-SQL Formatter project (transpiled C# to JS via Bridge.Net)

//UMD close - this is where we define any non-mechanical C#-transpilation aspects of the NPM library

//Primarily we will expose a "format" method, with options. Later, we can worry about exposing 
// interesting stuff like the parse tree. I don't think there are many people who find it 
// interesting anyway (and it's going to change in v2)

//First, produce a clean "option set" that can be used as key to a cache of formatters

const optionReference = {
  includeText:               {type: 'bool',   default: true,                                                             description: "The formatted SQL should be included in the result as a Text value/property" },
  includeHtml:               {type: 'bool',   default: false,                                                            description: "The formatted SQL should be included in the result as HTML" },
  includeHtmlPage:           {type: 'bool',   default: false,                                                            description: "The formatted SQL should be included in the result as a full HTML document" },
  includeTokenList:          {type: 'bool',   default: false,                                                            description: "The Token List produced from the Tokenization phase should be included" },
  includeParseTree:          {type: 'bool',   default: false,                                                            description: "The Parse Tree produced from the Parsing phase should be included" },
  formattingType:            {type: 'enum',   default: 'standard',     options: ['standard', 'identity', 'obfuscation'], description: "What kind of formatting to do - 'standard', 'identity' or 'obfuscation'" },
  indent:                    {type: 'string', default: '\\t',          appliesToFormattingType: ['standard'],            description: "The unit of indentation - typically a tab (\\t) or a number of spaces" },
  maxLineWidth:              {type: 'int',    default: 999,            appliesToFormattingType: ['standard'],            description: "Request that the formatter wrap long lines to avoid exceeding this line length" },
  spacesPerTab:              {type: 'int',    default: 4,              appliesToFormattingType: ['standard'],            description: "This is used to measure line length, and only applies if you use tabs" },
  statementBreaks:           {type: 'int',    default: 2,              appliesToFormattingType: ['standard'],            description: "How many linebreaks should be added when starting a new statement?" },
  clauseBreaks:              {type: 'int',    default: 1,              appliesToFormattingType: ['standard'],            description: "How many linebreaks should be added when starting a new clause within a statement?" },
  expandCommaLists:          {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "Should comma-delimited lists (columns, group by args, etc) be broken out onto new lines?" },
  trailingCommas:            {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "When starting a new line because of a comma, should the comma be at the end of line (VS the start of the next)?" },
  spaceAfterExpandedComma:   {type: 'bool',   default: false,          appliesToFormattingType: ['standard'],            description: "Should a space be added after the comma? (typically not if they are 'trailing')" },
  expandBooleanExpressions:  {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "Should boolean operators (AND, OR) cause a linebreak?" },
  expandCaseStatements:      {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "Should CASE expressions have their WHEN and THEN expressions be broken out on new lines?" },
  expandBetweenConditions:   {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "Should BETWEEN expressions have the max argument broken out on a new line?" },
  expandInLists:             {type: 'bool',   default: false,          appliesToFormattingType: ['standard'],            description: "Should IN() lists have each argument on a new line?" },
  breakJoinOnSections:       {type: 'bool',   default: false,          appliesToFormattingType: ['standard'],            description: "Should the ON section of a JOIN clause be broken out onto its own line?" },
  uppercaseKeywords:         {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "Should T-SQL keywords (like SELECT, FROM) be automatically uppercased?" },
  coloring:                  {type: 'bool',   default: true,           appliesToFormattingType: ['standard'],            description: "(In HTML output, if enabled) should keywords, comments etc have distinct color classes?" },
  keywordStandardization:    {type: 'bool',   default: false,          appliesToFormattingType: ['standard'],            description: "Should the ON section of a JOIN clause be broken out onto its own line?" },
  randomizeKeywordCase:      {type: 'bool',   default: false,          appliesToFormattingType: ['obfuscation'],         description: "Should the case of keywords be randomized, to minimize legibility?" },
  randomizeColor:            {type: 'bool',   default: false,          appliesToFormattingType: ['obfuscation'],         description: "(In HTML output, if enabled) should the color of the SQL text be randomly varied?" },
  randomizeLineLengths:      {type: 'bool',   default: false,          appliesToFormattingType: ['obfuscation'],         description: "Should the SQL be wrapped at arbitrary intervals, to minimize legibility?" },
  preserveComments:          {type: 'bool',   default: true,           appliesToFormattingType: ['obfuscation'],         description: "Should comments in the code be retained (vs being stripped out)?" },
  enableKeywordSubstitution: {type: 'bool',   default: false,          appliesToFormattingType: ['obfuscation'],         description: "Should keywords with synonyms use less common forms? (NOTE: only safe for T-SQL!)" },
  errorOutputPrefix:         {type: 'string',                                                                            description: "Text to be included (in a comment at the top) if parsing failed and result is therefore suspect" }
};

function mapArbitraryOptionsInputToStandardSet(optionInput, outputType) {
  var optionSet = {};

  optionSet.outputType       = outputType;
  optionSet.errorOutputPrefix = optionInput.errorOutputPrefix; //the default is defined in the C# lib

  if (optionInput.formattingType && optionReference.formattingType.options.indexOf(optionInput.formattingType) == -1)
    throw new Error("Invalid 'formattingtype' provided.");
    
  optionSet.formattingType = optionInput.formattingType || 'standard';

  //populate appropriate options and defaults
  for (var optionName in optionReference) {
    if (optionReference[optionName].appliesToFormattingType
        && optionReference[optionName].appliesToFormattingType.indexOf(optionSet.formattingType) >= 0)
        {
      switch (optionReference[optionName].type) {
        case 'string':
        case 'int':
          optionSet[optionName] = optionInput[optionName] || optionReference[optionName].default;
          break;
        case 'bool':
          if (optionReference[optionName].default)
            optionSet[optionName] = optionInput[optionName] !== false;
          else
            optionSet[optionName] = !!optionInput[optionName];
          break;
      }
    }
  }

  //correct coloring options for output type
  if (outputType != 'html' && outputType != 'htmlPage') {
    if(optionSet.formattingType == 'standard')
      optionSet.coloring = false;
    else if(optionSet.formattingType == 'obfuscation')
      optionSet.randomizeColor = false;
  }

  return optionSet;
}

function createFormatterForOptionSet(optionSet) {

  var formatter;

  switch (optionSet.formattingType) {
    case 'standard':
      var stdOptions = new PoorMansTSqlFormatterLib.Formatters.TSqlStandardFormatterOptions();
      stdOptions.IndentString             = optionSet.indent;
      stdOptions.SpacesPerTab             = optionSet.spacesPerTab;
      stdOptions.MaxLineWidth             = optionSet.maxLineWidth;
      stdOptions.NewStatementLineBreaks   = optionSet.statementBreaks;
      stdOptions.NewClauseLineBreaks      = optionSet.clauseBreaks;
      stdOptions.ExpandCommaLists         = optionSet.expandCommaLists;
      stdOptions.TrailingCommas           = optionSet.trailingCommas;
      stdOptions.SpaceAfterExpandedComma  = optionSet.spaceAfterExpandedComma;
      stdOptions.ExpandBooleanExpressions = optionSet.expandBooleanExpressions;
      stdOptions.ExpandCaseStatements     = optionSet.expandCaseStatements;
      stdOptions.ExpandBetweenConditions  = optionSet.expandBetweenConditions;
      stdOptions.ExpandInLists            = optionSet.expandInLists;
      stdOptions.BreakJoinOnSections      = optionSet.breakJoinOnSections;
      stdOptions.UppercaseKeywords        = optionSet.uppercaseKeywords;
      stdOptions.HTMLColoring             = optionSet.coloring;
      stdOptions.KeywordStandardization   = optionSet.keywordStandardization;
      formatter = new PoorMansTSqlFormatterLib.Formatters.TSqlStandardFormatter.$ctor1(stdOptions);
      break;
    case 'identity':
      formatter = new PoorMansTSqlFormatterLib.Formatters.TSqlIdentityFormatter.$ctor1(optionSet.enableHtmlOutput);
      break;
    case 'obfuscation':
      formatter = new PoorMansTSqlFormatterLib.Formatters.TSqlObfuscatingFormatter.$ctor1(
        optionSet.randomizeKeywordCase,
        optionSet.randomizeColor,
        optionSet.randomizeLineLengths,
        optionSet.preserveComments,
        optionSet.enableKeywordSubstitution
        );
      break;
    default:
      throw new Error("Unexpected error: invalid formattingType in optionSet.");
  }

  if(optionSet.errorOutputPrefix)
    formatter.ErrorOutputPrefix = optionSet.errorOutputPrefix;

  if (optionSet.outputType == "htmlPage")
    return new PoorMansTSqlFormatterLib.Formatters.HtmlPageWrapper(formatter);
  else
    return formatter;
}

var formatters = {}; //collection of however many configurations are invoked.

function getFormatter(optionInput, outputType) {
  var optionSet = mapArbitraryOptionsInputToStandardSet(optionInput, outputType);
  var optionSetText = JSON.stringify(optionSet);
  var formatter = formatters[optionSetText];
  if (!formatter) {
    formatter = createFormatterForOptionSet(optionSet);
    formatters[optionSetText] = formatter;
  }
  return formatter
}


var tokenizer; //singleton, but lazy-loaded
var parser; //singleton, but lazy-loaded

function formatSql(inputSql, options) {
  options = options || {};
  tokenizer = tokenizer || new PoorMansTSqlFormatterLib.Tokenizers.TSqlStandardTokenizer();
  parser    = parser    || new PoorMansTSqlFormatterLib.Parsers.TSqlStandardParser();

  var result = {};

  var tokenizedData = tokenizer.TokenizeSQL(inputSql);
  var parsedData = parser.ParseSQL(tokenizedData);

  if (options.includeText !== false)
    result.text = getFormatter(options, 'text').FormatSQLTree(parsedData);

  if (!!options.includeHtml)
    result.html = getFormatter(options, 'html').FormatSQLTree(parsedData);

  if (!!options.includeHtmlPage)
    result.htmlPage = getFormatter(options, 'htmlPage').FormatSQLTree(parsedData);

  if (!!options.includeTokenList)
    result.tokenList = JSON.stringify(tokenizedData);

  if (!!options.includeParseTree)
    result.parseTree = JSON.stringify(parsedData);

  result.errorFound = parsedData.GetAttributeValue("errorFound") == "1";

  return result;
}

return {
  formatSql: formatSql,
  optionReference: optionReference
  };
}));
//end UMD close

